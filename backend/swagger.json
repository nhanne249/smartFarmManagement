{
  "openapi": "3.0.0",
  "info": {
    "title": "Smart Farm Management API",
    "version": "1.0.0",
    "description": "API documentation for the Smart Farm Management system."
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Local server"
    }
  ],
  "paths": {
    "/analyst": {
      "get": {
        "summary": "Get analyst data",
        "description": "Retrieve data for analysis with pagination, optionally filtered by date range.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "items",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date for filtering (YYYY-MM-DD) - optional",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date for filtering (YYYY-MM-DD) - optional",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalPages": {
                      "type": "integer"
                    },
                    "totalItems": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "day": {
                            "type": "string",
                            "format": "date"
                          },
                          "data": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "temperature": {
                                  "type": "number"
                                },
                                "humidity": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "totalPages": 5,
                  "totalItems": 50,
                  "data": [
                    {
                      "day": "2025-04-12T00:00:00.000Z",
                      "data": [
                        {
                          "temperature": 25,
                          "humidity": 60
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/control/fan": {
      "patch": {
        "summary": "Control fan",
        "description": "Control fan with value from 0-100.",
        "parameters": [
          {
            "name": "data",
            "in": "query",
            "description": "Fan value (0-100)",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fan status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Fan status updated successfully",
                  "status": "50"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/control/pump": {
      "patch": {
        "summary": "Control pump",
        "description": "Control pump with value from 0-100.",
        "parameters": [
          {
            "name": "data",
            "in": "query",
            "description": "Pump value (0-100)",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pump status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Pump status updated successfully",
                  "status": "75"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/equipment-status": {
      "get": {
        "summary": "Get equipment status",
        "description": "Retrieve the current status/value of a specific equipment (fan or pump) from Adafruit IO.",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "Specify the equipment to retrieve status for ('fan' or 'pump')",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "fan",
                "pump"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "value": "50"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Lỗi khi lấy được dữ liệu!!!"
                }
              }
            }
          }
        }
      }
    },
    "/mcp-server": {
      "get": {
        "summary": "MCP Server SSE Connection",
        "description": "Establish Server-Sent Events connection to MCP server for real-time communication.",
        "responses": {
          "200": {
            "description": "SSE connection established",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "MCP Server Message Handler",
        "description": "Handle POST messages to MCP server with session ID.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "description": "Session ID for the MCP connection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "responses": {
            "200": {
              "description": "Message processed successfully"
            },
            "400": {
              "description": "Bad request - No transport found for sessionId",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "messages": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "messages": "No transport found for sessionId."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agent": {
      "post": {
        "summary": "AI Smart Farm Agent",
        "description": "AI assistant that analyzes user requests and uses appropriate tools via MCP (Model Context Protocol). Supports weather info, equipment status checking, and equipment control.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "object",
                    "properties": {
                      "input": {
                        "type": "string",
                        "description": "User input/question in Vietnamese or English"
                      },
                      "context": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "sender": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        },
                        "description": "Previous conversation context"
                      }
                    },
                    "required": [
                      "input"
                    ]
                  }
                },
                "required": [
                  "message"
                ]
              },
              "example": {
                "message": {
                  "input": "Thời tiết hiện tại như thế nào?",
                  "context": [
                    {
                      "sender": "User",
                      "message": "Hello"
                    },
                    {
                      "sender": "Assistant",
                      "message": "Xin chào! Tôi có thể giúp gì cho bạn?"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response from AI agent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "null"
                    },
                    "data": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "error": null,
                  "data": "Thời tiết hiện tại ở TP.HCM: 28°C, độ ẩm 75%, trời nắng. Điều kiện thuận lợi cho cây trồng phát triển."
                }
              }
            }
          },
          "400": {
            "description": "Error in processing request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object"
                    },
                    "data": {
                      "type": "null"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DayReport": {
        "type": "object",
        "properties": {
          "day": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "temperature": {
                  "type": "number"
                },
                "humidity": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "EquipmentStatus": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Equipment value (0-100)"
          }
        }
      },
      "AgentMessage": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string"
          },
          "context": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sender": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  }
}